using System;
using System.Collections;
using System.Collections.Generic;
using NitroxClient.Communication.Abstract;
using NitroxClient.GameLogic.InitialSync.Base;
using NitroxClient.MonoBehaviours;
using NitroxModel.DataStructures.GameLogic;
using NitroxModel.Packets;
using UnityEngine;

namespace NitroxClient.GameLogic.InitialSync;

public class PlayerPreferencesInitialSyncProcessor : InitialSyncProcessor
{
    private IPacketSender packetSender;

    public PlayerPreferencesInitialSyncProcessor(IPacketSender packetSender)
    {
        this.packetSender = packetSender;

        // list of processors which may cause the spawn of Signal pings
        DependentProcessors.AddRange(new List<Type>()
        {
            typeof(PlayerInitialSyncProcessor),
            typeof(GlobalRootInitialSyncProcessor),
            typeof(StoryGoalInitialSyncProcessor),
            typeof(PdaInitialSyncProcessor),
            typeof(EscapePodInitialSyncProcessor),
            typeof(RemotePlayerInitialSyncProcessor),
            typeof(BuildingInitialSyncProcessor),
        });
    }

    public override IEnumerator Process(InitialPlayerSync packet, WaitScreen.ManualWaitItem waitScreenItem)
    {
        UpdatePingInstancePreferences(packet.Preferences);
        waitScreenItem.SetProgress(1f);
        yield return null;
    }

    private void UpdatePingInstancePreferences(Dictionary<string, PingInstancePreference> preferences)
    {
        void updateInstance(PingInstance instance)
        {
            ModifyPingInstanceIfPossible(instance, preferences);
            RefreshPingEntryInPDA(instance);
        }
        
        PingManager.onAdd += (id, instance) => updateInstance(instance);
        GameObject.FindObjectsOfType<PingInstance>().ForEach(updateInstance);
    }

    /// <summary>
    /// Updateds the given pingInstance if it has a specified preference
    /// </summary>
    private void ModifyPingInstanceIfPossible(PingInstance pingInstance, Dictionary<string, PingInstancePreference> preferences)
    {
        if (TryGetKeyForPingInstance(pingInstance, out string pingKey, out bool isRemotePlayerPing) && preferences.TryGetValue(pingKey, out PingInstancePreference preference))
        {
            using (packetSender.Suppress<SignalPingPreferenceChanged>())
            {
                // We don't want to set the color for a remote player's signal
                if (!isRemotePlayerPing)
                {
                    pingInstance.SetColor(preference.Color);
                }
                pingInstance.SetVisible(preference.Visible);
            }
        }
    }

    // Right after initial sync modifications, uGUI_PingEntry elements don't show their updated state
    private void RefreshPingEntryInPDA(PingInstance pingInstance)
    {
        uGUI_PingTab pingTab;
        if (!uGUI_PDA.main || !uGUI_PDA.main.tabs.TryGetValue(PDATab.Ping, out uGUI_PDATab pdaTab))
        {
            return;
        }
        pingTab = pdaTab as uGUI_PingTab;
        if (pingTab && pingTab.entries.TryGetValue(pingInstance.GetInstanceID(), out uGUI_PingEntry pingEntry))
        {
            pingEntry.SetColor(pingInstance.colorIndex);
            pingEntry.SetVisible(pingInstance.visible);
        }
    }

    // We need to differentiate two types of pings, the "normal pings" from objects that emit a signal, these objects generally contain a NitroxEntity
    // Another type is Signal pings that are generated by the story events, they are located in the Global Root and don't contain a NitroxEntity, to be identified, they have another object: a SignalPing which contains a description key
    // The last type possible is RemotePlayers' pings which are located in a GameObject that is 2 steps under the main object
    /// <summary>
    /// Retrieves the identifier of a PingInstance depending on its type and container
    /// </summary>
    public static bool TryGetKeyForPingInstance(PingInstance pingInstance, out string pingKey, out bool isRemotePlayerPing)
    {
        isRemotePlayerPing = false;
        if (pingInstance.TryGetComponent(out SignalPing signalPing))
        {
            pingKey = signalPing.descriptionKey;
            return true;
        }
        if (pingInstance.TryGetComponent(out NitroxEntity nitroxEntity))
        {
            pingKey = nitroxEntity.Id.ToString();
            return true;
        }
        if (TryGetComponentInAscendance(pingInstance.transform, 2, out nitroxEntity))
        {
            pingKey = nitroxEntity.Id.ToString();
            isRemotePlayerPing = true;
            return true;
        }
        // Known issue for a ping named "xSignal(Clone)" that appears temporarily when another player joins
        if (pingInstance.name.Equals("xSignal(Clone)"))
        {
            pingKey = string.Empty;
            return false;
        }

        Log.Warn($"Couldn't find PingInstance identifier for {pingInstance.name} under {pingInstance.transform.parent}");
        pingKey = string.Empty;
        return false;
    }

    private static bool TryGetComponentInAscendance<T>(Transform transform, int degree, out T component)
    {
        while (degree > 0)
        {
            if (!transform.parent)
            {
                component = default;
                return false;
            }
            transform = transform.parent;
            degree--;
        }
        return transform.TryGetComponent(out component);
    }
}
