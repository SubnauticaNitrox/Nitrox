<Project>
    <!-- Set default properties for all projects (can be overridden per project) -->
    <PropertyGroup>
        <LangVersion>12.0</LangVersion>
        <Version>1.8.0.0</Version>
        <NitroxProject>false</NitroxProject>
        <TestLibrary>false</TestLibrary>
        <NitroxLibrary>false</NitroxLibrary>
        <UnityModLibrary>false</UnityModLibrary>
        <BuildToolDir>$(SolutionDir)Nitrox.BuildTool\bin\</BuildToolDir>
        <BuildGenDir>$(BuildToolDir)generated_files\</BuildGenDir>
        <BuildGenDllDir>$(BuildGenDir)publicized_assemblies\</BuildGenDllDir>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <Prefer32Bit>false</Prefer32Bit>
        <DebugType>embedded</DebugType>
        <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
        <ImplicitUsings>disable</ImplicitUsings>
        <PathMap>$(MSBuildProjectDirectory)=$(MSBuildProjectName)</PathMap>
        <EnableNETAnalyzers>true</EnableNETAnalyzers>
        <PolySharpUsePublicAccessibilityForGeneratedTypes>true</PolySharpUsePublicAccessibilityForGeneratedTypes>
    </PropertyGroup>

    <PropertyGroup Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(MSBuildProjectName), '^Nitrox.*$'))">
        <NitroxProject>true</NitroxProject>
    </PropertyGroup>
    <PropertyGroup Condition="'$(NitroxProject)' == 'true'">
        <NitroxLibrary>true</NitroxLibrary>
    </PropertyGroup>
    <PropertyGroup Condition="'$(NitroxLibrary)' == 'true' and '$(MSBuildProjectName)' != 'NitroxModel' and '$(MSBuildProjectName)' != 'NitroxServer' and '$(MSBuildProjectName)' != 'Nitrox.BuildTool'">
        <UnityModLibrary>true</UnityModLibrary>
    </PropertyGroup>
    <PropertyGroup Condition="'$(MSBuildProjectName)' == 'Nitrox.Test'">
        <TestLibrary>true</TestLibrary>
    </PropertyGroup>

    <!-- Shared dependencies for all Nitrox.* projects -->
    <Choose>
        <When Condition="'$(NitroxProject)' == 'true'">
            <ItemGroup>
                <PackageReference Include="JetBrains.Annotations" Version="2023.3.0">
                    <Aliases>JB</Aliases>
                </PackageReference>

              <PackageReference Include="PolySharp" Version="1.14.1">
                <PrivateAssets>all</PrivateAssets>
                <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
              </PackageReference>

              <PackageReference Include="System.Memory" Version="4.5.5" />
              <PackageReference Include="System.ValueTuple" Version="4.5.0" />
            </ItemGroup>
        </When>
    </Choose>

    <!-- Include default project references to all other "Nitrox*" projects -->
    <Choose>
        <When Condition="'$(UnityModLibrary)' == 'true'">
            <ItemGroup>
                <!-- Require other Nitrox projects (that need game DLLs) to wait on BuildTool. -->
                <ProjectReference Include="$(SolutionDir)Nitrox.BuildTool\Nitrox.BuildTool.csproj">
                    <Name>Nitrox.BuildTool</Name>
                    <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
                </ProjectReference>
                <ProjectReference Include="$(SolutionDir)NitroxModel\NitroxModel.csproj">
                    <Name>NitroxModel</Name>
                </ProjectReference>
                <PackageReference Include="Nitrox.Analyzers" Version="*">
                    <PrivateAssets>all</PrivateAssets>
                    <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
                </PackageReference>
            </ItemGroup>
        </When>
    </Choose>

    <!-- Set internals visible for all projects for Nitrox.Test (excluding Nitrox.Test itself) -->
    <Choose>
        <When Condition="'$(NitroxLibrary)' == 'true' and '$(TestLibrary)' != 'true'">
            <ItemGroup>
                <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
                    <_Parameter1>Nitrox.Test</_Parameter1>
                </AssemblyAttribute>
            </ItemGroup>
        </When>
    </Choose>

    <!-- Tell developer that it needs to build the Nitrox.BuildTool to fetch the game assemblies.
    "dotnet restore" should still be allowed to run to fetch NuGet packages -->
    <Target Name="PrepareForModding" AfterTargets="Restore;BeforeResolveReferences" Condition="'$(UnityModLibrary)' == 'true' and !Exists('$(BuildGenDir)publicized_assemblies')">
        <Error Text="Run the Nitrox.BuildTool project to fetch the assemblies, before building other Nitrox projects." />
    </Target>
    <!-- Include generated build properties. -->
    <Import Project="$(BuildGenDir)game.props" Condition="Exists('$(BuildGenDir)game.props')"/>
</Project>
