using System;
using System.Runtime.Serialization;

namespace NitroxModel.DataStructures.GameLogic.Buildings.New;

[Serializable, DataContract]
public struct BuildPieceIdentifier : IEquatable<BuildPieceIdentifier>
{
    [DataMember(Order = 1)]
    public NitroxTechType Recipe;
    [DataMember(Order = 2)]
    public NitroxBaseFace? BaseFace;
    [DataMember(Order = 3)]
    public NitroxInt3 BaseCell;
    [DataMember(Order = 4)]
    public NitroxInt3 PiecePoint;

    public BuildPieceIdentifier(NitroxTechType recipe, NitroxBaseFace? baseFace, NitroxInt3 baseCell, NitroxInt3 piecePoint)
    {
        Recipe = recipe;
        BaseFace = baseFace;
        BaseCell = baseCell;
        PiecePoint = piecePoint;
    }

    public bool Equals(BuildPieceIdentifier other)
    {
        return Recipe.Name.Equals(other.Recipe.Name) && BaseFace.Equals(other.BaseFace) && BaseCell.Equals(other.BaseCell) && PiecePoint.Equals(other.PiecePoint);
    }

    public override bool Equals(object obj)
    {
        return obj is BuildPieceIdentifier buildPieceIdentifier && Equals(buildPieceIdentifier);
    }

    public static bool operator ==(BuildPieceIdentifier left, BuildPieceIdentifier right)
    {
        return left.Equals(right);
    }

    public static bool operator !=(BuildPieceIdentifier left, BuildPieceIdentifier right)
    {
        return !(left == right);
    }

    public override string ToString()
    {
        return $"BuildPieceIdentifier [Recipe: {Recipe}, BaseFace: {BaseFace}, BaseCell: {BaseCell}, PiecePoint: {PiecePoint}]";
    }

    // Generated by Visual Studio
    public override int GetHashCode()
    {
        int hashCode = 920055407;
        hashCode = hashCode * -1521134295 + Recipe.GetHashCode();
        hashCode = hashCode * -1521134295 + BaseFace.GetHashCode();
        hashCode = hashCode * -1521134295 + BaseCell.GetHashCode();
        hashCode = hashCode * -1521134295 + PiecePoint.GetHashCode();
        return hashCode;
    }
}
