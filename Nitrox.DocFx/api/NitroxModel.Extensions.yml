### YamlMime:ManagedReference
items:
- uid: NitroxModel.Extensions
  commentId: T:NitroxModel.Extensions
  id: Extensions
  parent: NitroxModel
  children:
  - NitroxModel.Extensions.AsByteUnitText(System.UInt32)
  - NitroxModel.Extensions.GetAttribute``1(System.Enum)
  - NitroxModel.Extensions.GetFirstNonAggregateMessage(System.Exception)
  - NitroxModel.Extensions.GetIndex``1(``0[],``0)
  - NitroxModel.Extensions.RemoveAllFast``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Boolean})
  - NitroxModel.Extensions.RemoveWhere``3(System.Collections.Generic.IDictionary{``0,``1},``2,System.Func{``1,``2,System.Boolean})
  - NitroxModel.Extensions.SequenceEqualOrBothNull``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: Extensions
  fullName: NitroxModel.Extensions
  type: Class
  source:
    remote:
      path: NitroxModel/Extensions.cs
      branch: docfx
      repo: https://github.com/killzoms/Nitrox/
    id: Extensions
    path: ../NitroxModel/Extensions.cs
    startLine: 7
  assemblies:
  - NitroxModel
  namespace: NitroxModel
  syntax:
    content: public static class Extensions
    content.vb: Public Module Extensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: NitroxModel.Extensions.GetAttribute``1(System.Enum)
  commentId: M:NitroxModel.Extensions.GetAttribute``1(System.Enum)
  id: GetAttribute``1(System.Enum)
  isExtensionMethod: true
  parent: NitroxModel.Extensions
  langs:
  - csharp
  - vb
  name: GetAttribute<TAttribute>(Enum)
  nameWithType: Extensions.GetAttribute<TAttribute>(Enum)
  fullName: NitroxModel.Extensions.GetAttribute<TAttribute>(System.Enum)
  type: Method
  source:
    remote:
      path: NitroxModel/Extensions.cs
      branch: docfx
      repo: https://github.com/killzoms/Nitrox/
    id: GetAttribute
    path: ../NitroxModel/Extensions.cs
    startLine: 9
  assemblies:
  - NitroxModel
  namespace: NitroxModel
  syntax:
    content: 'public static TAttribute GetAttribute<TAttribute>(this Enum value) where TAttribute : Attribute'
    parameters:
    - id: value
      type: System.Enum
    typeParameters:
    - id: TAttribute
    return:
      type: '{TAttribute}'
    content.vb: Public Shared Function GetAttribute(Of TAttribute As Attribute)(value As [Enum]) As TAttribute
  overload: NitroxModel.Extensions.GetAttribute*
  nameWithType.vb: Extensions.GetAttribute(Of TAttribute)(Enum)
  fullName.vb: NitroxModel.Extensions.GetAttribute(Of TAttribute)(System.Enum)
  name.vb: GetAttribute(Of TAttribute)(Enum)
- uid: NitroxModel.Extensions.RemoveAllFast``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Boolean})
  commentId: M:NitroxModel.Extensions.RemoveAllFast``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Boolean})
  id: RemoveAllFast``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Boolean})
  isExtensionMethod: true
  parent: NitroxModel.Extensions
  langs:
  - csharp
  - vb
  name: RemoveAllFast<TItem, TParameter>(IList<TItem>, TParameter, Func<TItem, TParameter, bool>)
  nameWithType: Extensions.RemoveAllFast<TItem, TParameter>(IList<TItem>, TParameter, Func<TItem, TParameter, bool>)
  fullName: NitroxModel.Extensions.RemoveAllFast<TItem, TParameter>(System.Collections.Generic.IList<TItem>, TParameter, System.Func<TItem, TParameter, bool>)
  type: Method
  source:
    remote:
      path: NitroxModel/Extensions.cs
      branch: docfx
      repo: https://github.com/killzoms/Nitrox/
    id: RemoveAllFast
    path: ../NitroxModel/Extensions.cs
    startLine: 27
  assemblies:
  - NitroxModel
  namespace: NitroxModel
  summary: Removes all items from the list when the predicate returns true.
  example: []
  syntax:
    content: public static void RemoveAllFast<TItem, TParameter>(this IList<TItem> list, TParameter extraParameter, Func<TItem, TParameter, bool> predicate)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TItem}}
      description: The list to remove items from.
    - id: extraParameter
      type: '{TParameter}'
      description: An extra parameter to supply to the predicate.
    - id: predicate
      type: System.Func{{TItem},{TParameter},System.Boolean}
      description: The predicate that tests each item in the list for removal.
    typeParameters:
    - id: TItem
    - id: TParameter
    content.vb: Public Shared Sub RemoveAllFast(Of TItem, TParameter)(list As IList(Of TItem), extraParameter As TParameter, predicate As Func(Of TItem, TParameter, Boolean))
  overload: NitroxModel.Extensions.RemoveAllFast*
  nameWithType.vb: Extensions.RemoveAllFast(Of TItem, TParameter)(IList(Of TItem), TParameter, Func(Of TItem, TParameter, Boolean))
  fullName.vb: NitroxModel.Extensions.RemoveAllFast(Of TItem, TParameter)(System.Collections.Generic.IList(Of TItem), TParameter, System.Func(Of TItem, TParameter, Boolean))
  name.vb: RemoveAllFast(Of TItem, TParameter)(IList(Of TItem), TParameter, Func(Of TItem, TParameter, Boolean))
- uid: NitroxModel.Extensions.GetIndex``1(``0[],``0)
  commentId: M:NitroxModel.Extensions.GetIndex``1(``0[],``0)
  id: GetIndex``1(``0[],``0)
  isExtensionMethod: true
  parent: NitroxModel.Extensions
  langs:
  - csharp
  - vb
  name: GetIndex<T>(T[], T)
  nameWithType: Extensions.GetIndex<T>(T[], T)
  fullName: NitroxModel.Extensions.GetIndex<T>(T[], T)
  type: Method
  source:
    remote:
      path: NitroxModel/Extensions.cs
      branch: docfx
      repo: https://github.com/killzoms/Nitrox/
    id: GetIndex
    path: ../NitroxModel/Extensions.cs
    startLine: 41
  assemblies:
  - NitroxModel
  namespace: NitroxModel
  syntax:
    content: public static int GetIndex<T>(this T[] list, T itemToFind)
    parameters:
    - id: list
      type: '{T}[]'
    - id: itemToFind
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function GetIndex(Of T)(list As T(), itemToFind As T) As Integer
  overload: NitroxModel.Extensions.GetIndex*
  nameWithType.vb: Extensions.GetIndex(Of T)(T(), T)
  fullName.vb: NitroxModel.Extensions.GetIndex(Of T)(T(), T)
  name.vb: GetIndex(Of T)(T(), T)
- uid: NitroxModel.Extensions.AsByteUnitText(System.UInt32)
  commentId: M:NitroxModel.Extensions.AsByteUnitText(System.UInt32)
  id: AsByteUnitText(System.UInt32)
  isExtensionMethod: true
  parent: NitroxModel.Extensions
  langs:
  - csharp
  - vb
  name: AsByteUnitText(uint)
  nameWithType: Extensions.AsByteUnitText(uint)
  fullName: NitroxModel.Extensions.AsByteUnitText(uint)
  type: Method
  source:
    remote:
      path: NitroxModel/Extensions.cs
      branch: docfx
      repo: https://github.com/killzoms/Nitrox/
    id: AsByteUnitText
    path: ../NitroxModel/Extensions.cs
    startLine: 43
  assemblies:
  - NitroxModel
  namespace: NitroxModel
  syntax:
    content: public static string AsByteUnitText(this uint byteSize)
    parameters:
    - id: byteSize
      type: System.UInt32
    return:
      type: System.String
    content.vb: Public Shared Function AsByteUnitText(byteSize As UInteger) As String
  overload: NitroxModel.Extensions.AsByteUnitText*
  nameWithType.vb: Extensions.AsByteUnitText(UInteger)
  fullName.vb: NitroxModel.Extensions.AsByteUnitText(UInteger)
  name.vb: AsByteUnitText(UInteger)
- uid: NitroxModel.Extensions.GetFirstNonAggregateMessage(System.Exception)
  commentId: M:NitroxModel.Extensions.GetFirstNonAggregateMessage(System.Exception)
  id: GetFirstNonAggregateMessage(System.Exception)
  isExtensionMethod: true
  parent: NitroxModel.Extensions
  langs:
  - csharp
  - vb
  name: GetFirstNonAggregateMessage(Exception)
  nameWithType: Extensions.GetFirstNonAggregateMessage(Exception)
  fullName: NitroxModel.Extensions.GetFirstNonAggregateMessage(System.Exception)
  type: Method
  source:
    remote:
      path: NitroxModel/Extensions.cs
      branch: docfx
      repo: https://github.com/killzoms/Nitrox/
    id: GetFirstNonAggregateMessage
    path: ../NitroxModel/Extensions.cs
    startLine: 56
  assemblies:
  - NitroxModel
  namespace: NitroxModel
  syntax:
    content: public static string GetFirstNonAggregateMessage(this Exception exception)
    parameters:
    - id: exception
      type: System.Exception
    return:
      type: System.String
    content.vb: Public Shared Function GetFirstNonAggregateMessage(exception As Exception) As String
  overload: NitroxModel.Extensions.GetFirstNonAggregateMessage*
- uid: NitroxModel.Extensions.SequenceEqualOrBothNull``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NitroxModel.Extensions.SequenceEqualOrBothNull``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: SequenceEqualOrBothNull``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NitroxModel.Extensions
  langs:
  - csharp
  - vb
  name: SequenceEqualOrBothNull<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: Extensions.SequenceEqualOrBothNull<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NitroxModel.Extensions.SequenceEqualOrBothNull<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: NitroxModel/Extensions.cs
      branch: docfx
      repo: https://github.com/killzoms/Nitrox/
    id: SequenceEqualOrBothNull
    path: ../NitroxModel/Extensions.cs
    startLine: 69
  assemblies:
  - NitroxModel
  namespace: NitroxModel
  summary: Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.
  remarks: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="false"></xref> can't be thrown because of <code class="paramref">first</code> or <code class="paramref">second</code> being null.
  example: []
  syntax:
    content: public static bool SequenceEqualOrBothNull<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second)
    parameters:
    - id: first
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to compare to <code class="paramref">second</code>.
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> to compare to the first sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Boolean
      description: >-
        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.<br />

        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if both IEnumerables are null.
    content.vb: Public Shared Function SequenceEqualOrBothNull(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As Boolean
  overload: NitroxModel.Extensions.SequenceEqualOrBothNull*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code class="paramref">first</code> or <code class="paramref">second</code> is <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/keywords/null">null</a>.
  nameWithType.vb: Extensions.SequenceEqualOrBothNull(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NitroxModel.Extensions.SequenceEqualOrBothNull(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: SequenceEqualOrBothNull(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
- uid: NitroxModel.Extensions.RemoveWhere``3(System.Collections.Generic.IDictionary{``0,``1},``2,System.Func{``1,``2,System.Boolean})
  commentId: M:NitroxModel.Extensions.RemoveWhere``3(System.Collections.Generic.IDictionary{``0,``1},``2,System.Func{``1,``2,System.Boolean})
  id: RemoveWhere``3(System.Collections.Generic.IDictionary{``0,``1},``2,System.Func{``1,``2,System.Boolean})
  isExtensionMethod: true
  parent: NitroxModel.Extensions
  langs:
  - csharp
  - vb
  name: RemoveWhere<TKey, TValue, TParameter>(IDictionary<TKey, TValue>, TParameter, Func<TValue, TParameter, bool>)
  nameWithType: Extensions.RemoveWhere<TKey, TValue, TParameter>(IDictionary<TKey, TValue>, TParameter, Func<TValue, TParameter, bool>)
  fullName: NitroxModel.Extensions.RemoveWhere<TKey, TValue, TParameter>(System.Collections.Generic.IDictionary<TKey, TValue>, TParameter, System.Func<TValue, TParameter, bool>)
  type: Method
  source:
    remote:
      path: NitroxModel/Extensions.cs
      branch: docfx
      repo: https://github.com/killzoms/Nitrox/
    id: RemoveWhere
    path: ../NitroxModel/Extensions.cs
    startLine: 78
  assemblies:
  - NitroxModel
  namespace: NitroxModel
  syntax:
    content: public static void RemoveWhere<TKey, TValue, TParameter>(this IDictionary<TKey, TValue> dictionary, TParameter extraParameter, Func<TValue, TParameter, bool> predicate)
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    - id: extraParameter
      type: '{TParameter}'
    - id: predicate
      type: System.Func{{TValue},{TParameter},System.Boolean}
    typeParameters:
    - id: TKey
    - id: TValue
    - id: TParameter
    content.vb: Public Shared Sub RemoveWhere(Of TKey, TValue, TParameter)(dictionary As IDictionary(Of TKey, TValue), extraParameter As TParameter, predicate As Func(Of TValue, TParameter, Boolean))
  overload: NitroxModel.Extensions.RemoveWhere*
  nameWithType.vb: Extensions.RemoveWhere(Of TKey, TValue, TParameter)(IDictionary(Of TKey, TValue), TParameter, Func(Of TValue, TParameter, Boolean))
  fullName.vb: NitroxModel.Extensions.RemoveWhere(Of TKey, TValue, TParameter)(System.Collections.Generic.IDictionary(Of TKey, TValue), TParameter, System.Func(Of TValue, TParameter, Boolean))
  name.vb: RemoveWhere(Of TKey, TValue, TParameter)(IDictionary(Of TKey, TValue), TParameter, Func(Of TValue, TParameter, Boolean))
references:
- uid: NitroxModel
  commentId: N:NitroxModel
  href: NitroxModel.html
  name: NitroxModel
  nameWithType: NitroxModel
  fullName: NitroxModel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NitroxModel.Extensions.GetAttribute*
  commentId: Overload:NitroxModel.Extensions.GetAttribute
  href: NitroxModel.Extensions.GetAttribute.html#NitroxModel_Extensions_GetAttribute__1_System_Enum_
  name: GetAttribute
  nameWithType: Extensions.GetAttribute
  fullName: NitroxModel.Extensions.GetAttribute
- uid: System.Enum
  commentId: T:System.Enum
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.enum
  name: Enum
  nameWithType: Enum
  fullName: System.Enum
- uid: '{TAttribute}'
  commentId: '!:TAttribute'
  definition: TAttribute
  name: TAttribute
  nameWithType: TAttribute
  fullName: TAttribute
- uid: TAttribute
  commentId: '!:TAttribute'
  name: TAttribute
  nameWithType: TAttribute
  fullName: TAttribute
- uid: NitroxModel.Extensions.RemoveAllFast*
  commentId: Overload:NitroxModel.Extensions.RemoveAllFast
  href: NitroxModel.Extensions.RemoveAllFast.html#NitroxModel_Extensions_RemoveAllFast__2_System_Collections_Generic_IList___0____1_System_Func___0___1_System_Boolean__
  name: RemoveAllFast
  nameWithType: Extensions.RemoveAllFast
  fullName: NitroxModel.Extensions.RemoveAllFast
- uid: System.Collections.Generic.IList{{TItem}}
  commentId: T:System.Collections.Generic.IList{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<TItem>
  nameWithType: IList<TItem>
  fullName: System.Collections.Generic.IList<TItem>
  nameWithType.vb: IList(Of TItem)
  fullName.vb: System.Collections.Generic.IList(Of TItem)
  name.vb: IList(Of TItem)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TItem
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
- uid: '{TParameter}'
  commentId: '!:TParameter'
  definition: TParameter
  name: TParameter
  nameWithType: TParameter
  fullName: TParameter
- uid: System.Func{{TItem},{TParameter},System.Boolean}
  commentId: T:System.Func{``0,``1,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TItem, TParameter, bool>
  nameWithType: Func<TItem, TParameter, bool>
  fullName: System.Func<TItem, TParameter, bool>
  nameWithType.vb: Func(Of TItem, TParameter, Boolean)
  fullName.vb: System.Func(Of TItem, TParameter, Boolean)
  name.vb: Func(Of TItem, TParameter, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TParameter
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TParameter
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: TParameter
  name: TParameter
  nameWithType: TParameter
  fullName: TParameter
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NitroxModel.Extensions.GetIndex*
  commentId: Overload:NitroxModel.Extensions.GetIndex
  href: NitroxModel.Extensions.GetIndex.html#NitroxModel_Extensions_GetIndex__1___0_____0_
  name: GetIndex
  nameWithType: Extensions.GetIndex
  fullName: NitroxModel.Extensions.GetIndex
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NitroxModel.Extensions.AsByteUnitText*
  commentId: Overload:NitroxModel.Extensions.AsByteUnitText
  href: NitroxModel.Extensions.AsByteUnitText.html#NitroxModel_Extensions_AsByteUnitText_System_UInt32_
  name: AsByteUnitText
  nameWithType: Extensions.AsByteUnitText
  fullName: NitroxModel.Extensions.AsByteUnitText
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint32
  name: uint
  nameWithType: uint
  fullName: uint
  nameWithType.vb: UInteger
  fullName.vb: UInteger
  name.vb: UInteger
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: NitroxModel.Extensions.GetFirstNonAggregateMessage*
  commentId: Overload:NitroxModel.Extensions.GetFirstNonAggregateMessage
  href: NitroxModel.Extensions.GetFirstNonAggregateMessage.html#NitroxModel_Extensions_GetFirstNonAggregateMessage_System_Exception_
  name: GetFirstNonAggregateMessage
  nameWithType: Extensions.GetFirstNonAggregateMessage
  fullName: NitroxModel.Extensions.GetFirstNonAggregateMessage
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.exception
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NitroxModel.Extensions.SequenceEqualOrBothNull*
  commentId: Overload:NitroxModel.Extensions.SequenceEqualOrBothNull
  href: NitroxModel.Extensions.SequenceEqualOrBothNull.html#NitroxModel_Extensions_SequenceEqualOrBothNull__1_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___0__
  name: SequenceEqualOrBothNull
  nameWithType: Extensions.SequenceEqualOrBothNull
  fullName: NitroxModel.Extensions.SequenceEqualOrBothNull
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NitroxModel.Extensions.RemoveWhere*
  commentId: Overload:NitroxModel.Extensions.RemoveWhere
  href: NitroxModel.Extensions.RemoveWhere.html#NitroxModel_Extensions_RemoveWhere__3_System_Collections_Generic_IDictionary___0___1____2_System_Func___1___2_System_Boolean__
  name: RemoveWhere
  nameWithType: Extensions.RemoveWhere
  fullName: NitroxModel.Extensions.RemoveWhere
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.IDictionary{``0,``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Func{{TValue},{TParameter},System.Boolean}
  commentId: T:System.Func{``1,``2,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TValue, TParameter, bool>
  nameWithType: Func<TValue, TParameter, bool>
  fullName: System.Func<TValue, TParameter, bool>
  nameWithType.vb: Func(Of TValue, TParameter, Boolean)
  fullName.vb: System.Func(Of TValue, TParameter, Boolean)
  name.vb: Func(Of TValue, TParameter, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TValue
  - name: ','
  - name: " "
  - name: TParameter
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: ','
  - name: " "
  - name: TParameter
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
memberLayout: SeparatePages
