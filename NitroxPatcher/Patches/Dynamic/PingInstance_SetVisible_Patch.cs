using System.Reflection;
using HarmonyLib;
using NitroxClient.Communication.Abstract;
using NitroxClient.MonoBehaviours;
using NitroxModel.DataStructures.Util;
using NitroxModel.Helper;
using NitroxModel.Packets;

namespace NitroxPatcher.Patches.Dynamic;

/// <summary>
/// Notice the server of a Ping visibility change
/// </summary>
public class PingInstance_SetVisible_Patch : NitroxPatch, IDynamicPatch
{
    private static readonly MethodInfo TARGET_METHOD = Reflect.Method((PingInstance t) => t.SetVisible(default));

    public static void Prefix(PingInstance __instance, bool visible)
    {
        // Only notice server if there's a change on client-side
        if (__instance.visible == visible)
        {
            return;
        }
        // We need to differentiate two types of pings, the "normal pings" from objects that emit a signal, these objects generally contain a NitroxEntity
        // And the other type is Signal pings that are generated by the story events, they are located in the Global Root and don't contain a NitroxEntity, to be identified, they have another object: a SignalPing which contains a description key
        Optional<string> pingKey = Optional.Empty;
        
        if (!NitroxEntity.TryGetEntityFrom(__instance.gameObject, out NitroxEntity entity))
        {
            if (__instance.TryGetComponent(out SignalPing signalPing))
            {
                pingKey = signalPing.descriptionKey;
            }
            else
            {
                Log.Warn($"Couldn't notify server of a PingInstance visibility change for {__instance.name}");
            }
        }
        else
        {
            pingKey = entity.Id.ToString();
        }

        if (pingKey.HasValue)
        {
            Resolve<IPacketSender>().Send(new SignalPingVisibilityChanged(pingKey.Value, visible));
        }
    }

    public override void Patch(Harmony harmony)
    {
        PatchPrefix(harmony, TARGET_METHOD, nameof(Prefix));
    }
}
